//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""ActionsMap"",
            ""id"": ""b940781c-dc2a-4148-b78a-5d50fa9a75d2"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""b504647c-7fb9-483d-9c12-d52a4997c49f"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Shoot"",
                    ""type"": ""Button"",
                    ""id"": ""53c9b0b9-8fce-4d00-ab9e-18545a3ac7aa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Escape"",
                    ""type"": ""Button"",
                    ""id"": ""985e8f12-3482-40f0-a3c9-d8a8d17b6bf3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""IncrementHealth"",
                    ""type"": ""Button"",
                    ""id"": ""6db21822-079c-4c76-bb5b-f3d847f3545b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DecrementHealth"",
                    ""type"": ""Button"",
                    ""id"": ""bf10f3d2-b6bc-4c2c-9d4a-e65b0dc476a5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0ee25d17-e54e-469a-9c63-5d13f65b2425"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2dvector"",
                    ""id"": ""ea2104c5-0ff6-456d-a7d1-def09f405303"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""02f075a7-89f0-46f2-966f-29f0845310c9"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""49c52e49-cda0-4d87-986a-531dc4785a50"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""49dc1a63-4c6c-430a-804e-dd2b8cba3c39"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""327992d0-cf8e-4236-894c-5d10db3ce089"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2d68efbd-97a1-44aa-9944-25192ea52cc7"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""PCScheme"",
                    ""action"": ""Shoot"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a1a424f-2714-4fa5-a1e1-9eed1ed8bbbe"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Escape"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8ba2ca8e-d2b1-4c0c-8b8e-247d5557c8a9"",
                    ""path"": ""<Keyboard>/t"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""IncrementHealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f852958-9366-4258-9793-39a6db647d41"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DecrementHealth"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PCScheme"",
            ""bindingGroup"": ""PCScheme"",
            ""devices"": []
        }
    ]
}");
        // ActionsMap
        m_ActionsMap = asset.FindActionMap("ActionsMap", throwIfNotFound: true);
        m_ActionsMap_Movement = m_ActionsMap.FindAction("Movement", throwIfNotFound: true);
        m_ActionsMap_Shoot = m_ActionsMap.FindAction("Shoot", throwIfNotFound: true);
        m_ActionsMap_Escape = m_ActionsMap.FindAction("Escape", throwIfNotFound: true);
        m_ActionsMap_IncrementHealth = m_ActionsMap.FindAction("IncrementHealth", throwIfNotFound: true);
        m_ActionsMap_DecrementHealth = m_ActionsMap.FindAction("DecrementHealth", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // ActionsMap
    private readonly InputActionMap m_ActionsMap;
    private List<IActionsMapActions> m_ActionsMapActionsCallbackInterfaces = new List<IActionsMapActions>();
    private readonly InputAction m_ActionsMap_Movement;
    private readonly InputAction m_ActionsMap_Shoot;
    private readonly InputAction m_ActionsMap_Escape;
    private readonly InputAction m_ActionsMap_IncrementHealth;
    private readonly InputAction m_ActionsMap_DecrementHealth;
    public struct ActionsMapActions
    {
        private @PlayerInput m_Wrapper;
        public ActionsMapActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_ActionsMap_Movement;
        public InputAction @Shoot => m_Wrapper.m_ActionsMap_Shoot;
        public InputAction @Escape => m_Wrapper.m_ActionsMap_Escape;
        public InputAction @IncrementHealth => m_Wrapper.m_ActionsMap_IncrementHealth;
        public InputAction @DecrementHealth => m_Wrapper.m_ActionsMap_DecrementHealth;
        public InputActionMap Get() { return m_Wrapper.m_ActionsMap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionsMapActions set) { return set.Get(); }
        public void AddCallbacks(IActionsMapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionsMapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionsMapActionsCallbackInterfaces.Add(instance);
            @Movement.started += instance.OnMovement;
            @Movement.performed += instance.OnMovement;
            @Movement.canceled += instance.OnMovement;
            @Shoot.started += instance.OnShoot;
            @Shoot.performed += instance.OnShoot;
            @Shoot.canceled += instance.OnShoot;
            @Escape.started += instance.OnEscape;
            @Escape.performed += instance.OnEscape;
            @Escape.canceled += instance.OnEscape;
            @IncrementHealth.started += instance.OnIncrementHealth;
            @IncrementHealth.performed += instance.OnIncrementHealth;
            @IncrementHealth.canceled += instance.OnIncrementHealth;
            @DecrementHealth.started += instance.OnDecrementHealth;
            @DecrementHealth.performed += instance.OnDecrementHealth;
            @DecrementHealth.canceled += instance.OnDecrementHealth;
        }

        private void UnregisterCallbacks(IActionsMapActions instance)
        {
            @Movement.started -= instance.OnMovement;
            @Movement.performed -= instance.OnMovement;
            @Movement.canceled -= instance.OnMovement;
            @Shoot.started -= instance.OnShoot;
            @Shoot.performed -= instance.OnShoot;
            @Shoot.canceled -= instance.OnShoot;
            @Escape.started -= instance.OnEscape;
            @Escape.performed -= instance.OnEscape;
            @Escape.canceled -= instance.OnEscape;
            @IncrementHealth.started -= instance.OnIncrementHealth;
            @IncrementHealth.performed -= instance.OnIncrementHealth;
            @IncrementHealth.canceled -= instance.OnIncrementHealth;
            @DecrementHealth.started -= instance.OnDecrementHealth;
            @DecrementHealth.performed -= instance.OnDecrementHealth;
            @DecrementHealth.canceled -= instance.OnDecrementHealth;
        }

        public void RemoveCallbacks(IActionsMapActions instance)
        {
            if (m_Wrapper.m_ActionsMapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionsMapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionsMapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionsMapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionsMapActions @ActionsMap => new ActionsMapActions(this);
    private int m_PCSchemeSchemeIndex = -1;
    public InputControlScheme PCSchemeScheme
    {
        get
        {
            if (m_PCSchemeSchemeIndex == -1) m_PCSchemeSchemeIndex = asset.FindControlSchemeIndex("PCScheme");
            return asset.controlSchemes[m_PCSchemeSchemeIndex];
        }
    }
    public interface IActionsMapActions
    {
        void OnMovement(InputAction.CallbackContext context);
        void OnShoot(InputAction.CallbackContext context);
        void OnEscape(InputAction.CallbackContext context);
        void OnIncrementHealth(InputAction.CallbackContext context);
        void OnDecrementHealth(InputAction.CallbackContext context);
    }
}
